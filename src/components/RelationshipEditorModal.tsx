import React, { useState, useEffect } from 'react';
import { X, Save, Trash2, Link } from 'lucide-react';
import { TableData, RelationshipData, ReferentialAction } from '../types';

interface RelationshipEditorModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (relationship: RelationshipData) => void;
  onDelete?: (relationshipId: string) => void;
  relationship: Partial<RelationshipData>;
  tables: TableData[];
}

export const RelationshipEditorModal: React.FC<RelationshipEditorModalProps> = ({
  isOpen,
  onClose,
  onSave,
  onDelete,
  relationship,
  tables
}) => {
  const [type, setType] = useState<'one-to-one' | 'one-to-many'>('one-to-many');
  const [onUpdate, setOnUpdate] = useState<ReferentialAction>('NO ACTION');
  const [onDeleteAction, setOnDeleteAction] = useState<ReferentialAction>('NO ACTION');

  useEffect(() => {
    if (relationship) {
      setType(relationship.type || 'one-to-many');
      setOnUpdate(relationship.onUpdate || 'NO ACTION');
      setOnDeleteAction(relationship.onDelete || 'NO ACTION');
    }
  }, [relationship]);

  if (!isOpen || !relationship.sourceTable || !relationship.targetTable) return null;

  const handleSave = () => {
    const finalRelationship: RelationshipData = {
      id: relationship.id || '', // ID will be generated by the hook if it's new
      sourceTable: relationship.sourceTable!,
      targetTable: relationship.targetTable!,
      sourceColumn: relationship.sourceColumn!,
      targetColumn: relationship.targetColumn!,
      type,
      onUpdate,
      onDelete: onDeleteAction,
    };
    onSave(finalRelationship);
    onClose();
  };
  
  const handleDelete = () => {
    if (relationship.id && onDelete) {
      onDelete(relationship.id);
    }
    onClose();
  };

  const sourceTable = tables.find(t => t.id === relationship.sourceTable);
  const targetTable = tables.find(t => t.id === relationship.targetTable);
  const sourceColumn = sourceTable?.columns.find(c => c.id === relationship.sourceColumn);
  const targetColumn = targetTable?.columns.find(c => c.id === relationship.targetColumn);

  const referentialActions: ReferentialAction[] = ['CASCADE', 'SET NULL', 'NO ACTION', 'RESTRICT', 'SET DEFAULT'];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-lg">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100 flex items-center gap-2">
            <Link className="w-5 h-5 text-blue-500" />
            {relationship.id ? 'Edit Relationship' : 'Create Relationship'}
          </h2>
          <button onClick={onClose} className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md">
            <X className="w-5 h-5 text-gray-500 dark:text-gray-400" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          <div className="text-center text-gray-700 dark:text-gray-300">
            <p>
              From <code className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">{sourceTable?.name}.{sourceColumn?.name}</code>
            </p>
            <p className="my-2">to</p>
            <p>
              <code className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">{targetTable?.name}.{targetColumn?.name}</code>
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Relationship Type
            </label>
            <select
              value={type}
              onChange={(e) => setType(e.target.value as 'one-to-one' | 'one-to-many')}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="one-to-many">One-to-Many</option>
              <option value="one-to-one">One-to-One</option>
            </select>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                ON UPDATE
              </label>
              <select
                value={onUpdate}
                onChange={(e) => setOnUpdate(e.target.value as ReferentialAction)}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                {referentialActions.map(action => <option key={action} value={action}>{action}</option>)}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                ON DELETE
              </label>
              <select
                value={onDeleteAction}
                onChange={(e) => setOnDeleteAction(e.target.value as ReferentialAction)}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                {referentialActions.map(action => <option key={action} value={action}>{action}</option>)}
              </select>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-4 border-t border-gray-200 dark:border-gray-700">
          <div>
            {relationship.id && onDelete && (
              <button
                onClick={handleDelete}
                className="flex items-center gap-2 px-4 py-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/50 rounded-md transition-colors"
              >
                <Trash2 className="w-4 h-4" />
                Delete Relationship
              </button>
            )}
          </div>
          <div className="flex gap-3">
            <button
              onClick={onClose}
              className="px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Save className="w-4 h-4" />
              Save
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
